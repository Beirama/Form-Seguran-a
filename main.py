import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import base64
from io import BytesIO
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import altair as alt
from reportlab.lib import colors
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
import io
import locale
from datetime import datetime

# Configurar a localiza√ß√£o para formata√ß√£o adequada de n√∫meros em portugu√™s
locale.setlocale(locale.LC_ALL, 'pt_BR.UTF-8')

# Configurar a p√°gina
st.set_page_config(
    page_title="Avalia√ß√£o de Seguran√ßa de Dados",
    page_icon="üîí",
    layout="wide",
)

# Fun√ß√£o para formatar valores monet√°rios
def format_currency(value):
    return f"R$ {value:,.2f}".replace(',', 'X').replace('.', ',').replace('X', '.')

# Fun√ß√£o para formatar horas
def format_hours(hours):
    if hours == int(hours):
        return f"{int(hours)} hora{'s' if hours != 1 else ''}"
    else:
        hours_int = int(hours)
        minutes = int((hours - hours_int) * 60)
        if hours_int == 0:
            return f"{minutes} minuto{'s' if minutes != 1 else ''}"
        else:
            return f"{hours_int}h{minutes:02d}min"

# Fun√ß√£o para formatar percentuais
def format_percent(value):
    return f"{value:.1f}%"

# Dados de benchmarking por setor
def get_benchmark_data():
    return {
        "Tecnologia": {
            "Infraestrutura": 85,
            "Pol√≠ticas": 82,
            "Prote√ß√£o": 88,
            "Total": 85
        },
        "Finan√ßas": {
            "Infraestrutura": 90,
            "Pol√≠ticas": 92,
            "Prote√ß√£o": 94,
            "Total": 92
        },
        "Sa√∫de": {
            "Infraestrutura": 78,
            "Pol√≠ticas": 85,
            "Prote√ß√£o": 82,
            "Total": 82
        },
        "Varejo": {
            "Infraestrutura": 70,
            "Pol√≠ticas": 65,
            "Prote√ß√£o": 68,
            "Total": 68
        },
        "Educa√ß√£o": {
            "Infraestrutura": 65,
            "Pol√≠ticas": 70,
            "Prote√ß√£o": 62,
            "Total": 66
        },
        "Manufatura": {
            "Infraestrutura": 72,
            "Pol√≠ticas": 68,
            "Prote√ß√£o": 70,
            "Total": 70
        },
        "Servi√ßos": {
            "Infraestrutura": 68,
            "Pol√≠ticas": 72,
            "Prote√ß√£o": 65,
            "Total": 68
        }
    }

# Fun√ß√£o para criar PDF completo com os resultados
def create_pdf_report(results, vulnerabilities, recommendations, company_name="Sua Empresa"):
    buffer = io.BytesIO()
    # Usar margens menores para mais espa√ßo √∫til na p√°gina
    doc = SimpleDocTemplate(
        buffer, 
        pagesize=A4,
        rightMargin=36,
        leftMargin=36,
        topMargin=36,
        bottomMargin=36
    )
    styles = getSampleStyleSheet()
    elements = []
    
    # Definir estilos personalizados
    title_style = ParagraphStyle(
        'TitleStyle',
        parent=styles['Heading1'],
        fontSize=20,
        alignment=1,
        spaceAfter=16,
        textColor=colors.darkblue
    )
    
    subtitle_style = ParagraphStyle(
        'SubtitleStyle',
        parent=styles['Heading2'],
        fontSize=16,
        spaceBefore=16,
        spaceAfter=12,
        textColor=colors.darkblue
    )
    
    normal_style = ParagraphStyle(
        'NormalStyle',
        parent=styles['Normal'],
        fontSize=10,
        spaceAfter=10
    )
    
    date_style = ParagraphStyle(
        'DateStyle',
        parent=styles['Normal'],
        fontSize=10,
        alignment=1,
        textColor=colors.gray
    )
    
    # Cabe√ßalho do relat√≥rio
    elements.append(Paragraph(f"RELAT√ìRIO DE SEGURAN√áA DE DADOS", title_style))
    elements.append(Paragraph(f"{company_name}", subtitle_style))
    elements.append(Paragraph(f"Gerado em: {datetime.now().strftime('%d/%m/%Y %H:%M')}", date_style))
    elements.append(Spacer(1, 0.5*inch))
    
    # Determinar que tipo de relat√≥rio estamos gerando com base nas chaves presentes
    report_type = ""
    if 'Pontua√ß√£o Geral' in results and 'Pontua√ß√£o Infraestrutura' in results:
        report_type = "vulnerability"
    elif 'Investimento' in results and 'Economia' in results:
        report_type = "roi"
    elif 'M√©dia do Setor' in results and 'Diferen√ßa' in results:
        report_type = "benchmark"
    
    # Resumo de resultados com formata√ß√£o baseada no tipo de relat√≥rio
    if report_type == "vulnerability":
        elements.append(Paragraph("RESUMO DA AVALIA√á√ÉO DE VULNERABILIDADE", subtitle_style))
        
        # Tabela de resumo para relat√≥rio de vulnerabilidade
        table_data = [["M√©trica", "Valor", "Classifica√ß√£o"]]
        
        # Pontua√ß√£o geral com destaque
        risk_level = results.get('N√≠vel de Risco', '')
        risk_color = colors.red if risk_level == "Cr√≠tico" else colors.orange if risk_level == "Moderado" else colors.green
        
        table_data.append([
            Paragraph("<b>Pontua√ß√£o Geral</b>", normal_style),
            Paragraph(f"<b>{format_percent(results['Pontua√ß√£o Geral'])}</b>", normal_style),
            Paragraph(f"<font color={risk_color}><b>{risk_level}</b></font>", normal_style)
        ])
        
        # Outras m√©tricas
        if 'Pontua√ß√£o Infraestrutura' in results:
            table_data.append([
                "Infraestrutura", 
                format_percent(results['Pontua√ß√£o Infraestrutura']),
                ""
            ])
        
        if 'Pontua√ß√£o Pol√≠ticas' in results:
            table_data.append([
                "Pol√≠ticas", 
                format_percent(results['Pontua√ß√£o Pol√≠ticas']),
                ""
            ])
            
        if 'Pontua√ß√£o Prote√ß√£o' in results:
            table_data.append([
                "Prote√ß√£o", 
                format_percent(results['Pontua√ß√£o Prote√ß√£o']),
                ""
            ])
            
        if 'Total de Vulnerabilidades' in results:
            table_data.append([
                "Vulnerabilidades Detectadas", 
                str(results['Total de Vulnerabilidades']),
                ""
            ])
            
    elif report_type == "roi":
        elements.append(Paragraph("AN√ÅLISE DE RETORNO SOBRE INVESTIMENTO (ROI)", subtitle_style))
        
        # Tabela de resumo para relat√≥rio de ROI
        table_data = [["M√©trica", "Valor", ""]]
        
        if 'Investimento' in results:
            table_data.append([
                "Investimento em Seguran√ßa", 
                format_currency(results['Investimento']),
                ""
            ])
            
        if 'Economia' in results:
            table_data.append([
                "Economia Projetada", 
                format_currency(results['Economia']),
                ""
            ])
            
        if 'ROI' in results:
            # Formatar o ROI com cor baseada no valor
            roi_value = results['ROI']
            roi_color = colors.green if roi_value > 0 else colors.red
            
            table_data.append([
                "Retorno sobre Investimento (ROI)", 
                Paragraph(f"<font color={roi_color}><b>{format_percent(roi_value)}</b></font>", normal_style),
                ""
            ])
            
        if 'Perda de Clientes' in results:
            table_data.append([
                "Perda de Receita (Clientes)", 
                format_currency(results['Perda de Clientes']),
                ""
            ])
            
        if 'Impacto Total' in results:
            table_data.append([
                "Impacto Financeiro Total", 
                format_currency(results['Impacto Total']),
                ""
            ])
            
    elif report_type == "benchmark":
        elements.append(Paragraph("AN√ÅLISE COMPARATIVA DE BENCHMARKING", subtitle_style))
        
        # Tabela de resumo para relat√≥rio de benchmarking
        table_data = [["M√©trica", "Valor", "Status"]]
        
        if 'Pontua√ß√£o Geral' in results:
            table_data.append([
                "Pontua√ß√£o da Empresa", 
                format_percent(results['Pontua√ß√£o Geral']),
                ""
            ])
            
        if 'M√©dia do Setor' in results:
            table_data.append([
                "M√©dia do Setor", 
                format_percent(results['M√©dia do Setor']),
                ""
            ])
            
        if 'Diferen√ßa' in results:
            # Formatar a diferen√ßa com cor baseada no valor
            diff_value = results['Diferen√ßa']
            diff_color = colors.green if diff_value >= 0 else colors.red
            diff_status = results.get('N√≠vel de Risco', '')
            
            table_data.append([
                "Diferen√ßa", 
                Paragraph(f"<font color={diff_color}><b>{diff_value:+.1f}%</b></font>", normal_style),
                diff_status
            ])
            
        if 'Pontua√ß√£o Infraestrutura' in results:
            table_data.append([
                "Infraestrutura", 
                format_percent(results['Pontua√ß√£o Infraestrutura']),
                ""
            ])
            
        if 'Pontua√ß√£o Pol√≠ticas' in results:
            table_data.append([
                "Pol√≠ticas", 
                format_percent(results['Pontua√ß√£o Pol√≠ticas']),
                ""
            ])
            
        if 'Pontua√ß√£o Prote√ß√£o' in results:
            table_data.append([
                "Prote√ß√£o", 
                format_percent(results['Pontua√ß√£o Prote√ß√£o']),
                ""
            ])
    else:
        # Relat√≥rio gen√©rico se n√£o for identificado um tipo espec√≠fico
        elements.append(Paragraph("RESUMO DE RESULTADOS", subtitle_style))
        
        # Tabela de dados gen√©rica
        table_data = [["M√©trica", "Valor", ""]]
        for key, value in results.items():
            # Determinar o formato adequado com base no nome da chave e no tipo do valor
            if isinstance(value, (int, float)) and 'percent' in key.lower() or key.lower() in ['roi', 'pontua√ß√£o']:
                formatted_value = format_percent(value)
            elif isinstance(value, (int, float)) and any(term in key.lower() for term in ['custo', 'valor', 'pre√ßo', 'investimento']):
                formatted_value = format_currency(value)
            else:
                formatted_value = str(value)
                
            table_data.append([key, formatted_value, ""])
    
    # Criar tabela com estilo melhorado
    # Ajustar larguras de coluna com base no tipo de relat√≥rio
    if report_type == "roi":
        # Para ROI, dar mais espa√ßo para os valores monet√°rios
        col_widths = [2.7*inch, 2.0*inch, 1.3*inch]
    else:
        col_widths = [2.4*inch, 1.8*inch, 1.8*inch]
        
    table = Table(table_data, colWidths=col_widths)
    
    # Estilo da tabela mais sofisticado
    table_style = [
        # Cabe√ßalho
        ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.white),
        ('ALIGN', (0, 0), (-1, 0), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 8),
        ('TOPPADDING', (0, 0), (-1, 0), 8),
        
        # Corpo da tabela
        ('BACKGROUND', (0, 1), (-1, -1), colors.white),
        ('TEXTCOLOR', (0, 1), (0, -1), colors.black),
        ('ALIGN', (0, 1), (0, -1), 'LEFT'),
        ('FONTNAME', (0, 1), (0, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 10),
        ('BOTTOMPADDING', (0, 1), (-1, -1), 6),
        ('TOPPADDING', (0, 1), (-1, -1), 6),
        
        # Valores (coluna do meio) alinhados √† direita
        ('ALIGN', (1, 1), (1, -1), 'RIGHT'),
        ('FONTNAME', (1, 1), (1, -1), 'Helvetica'),
        
        # Classifica√ß√£o (√∫ltima coluna) centralizada
        ('ALIGN', (2, 1), (2, -1), 'CENTER'),
        
        # Linhas alternadas com cores suaves
        ('BACKGROUND', (0, 1), (-1, 1), colors.lightgrey),
        ('BACKGROUND', (0, 3), (-1, 3), colors.lightgrey),
        ('BACKGROUND', (0, 5), (-1, 5), colors.lightgrey),
        
        # Bordas refinadas
        ('GRID', (0, 0), (-1, -1), 0.5, colors.grey),
        ('BOX', (0, 0), (-1, -1), 1, colors.black),
        ('LINEABOVE', (0, 1), (-1, 1), 1, colors.black),
    ]
    
    table.setStyle(TableStyle(table_style))
    elements.append(table)
    elements.append(Spacer(1, 0.3*inch))
    
    # Adicionar vulnerabilidades
    if vulnerabilities:
        elements.append(Spacer(1, 0.2*inch))
        elements.append(Paragraph("VULNERABILIDADES IDENTIFICADAS", subtitle_style))
        
        # Criar lista numerada de vulnerabilidades para melhor legibilidade
        for i, vuln in enumerate(vulnerabilities, 1):
            # Usar par√°grafos em vez de tabela para melhor formata√ß√£o de texto
            vuln_text = Paragraph(
                f"<strong>{i}.</strong> {vuln}",
                ParagraphStyle(
                    'VulnStyle',
                    parent=styles['Normal'],
                    fontSize=10,
                    textColor=colors.darkred,
                    leftIndent=15,
                    spaceBefore=6,
                    spaceAfter=6
                )
            )
            elements.append(vuln_text)
        
        elements.append(Spacer(1, 0.2*inch))
    
    # Adicionar recomenda√ß√µes
    if recommendations:
        elements.append(Spacer(1, 0.2*inch))
        elements.append(Paragraph("RECOMENDA√á√ïES DE MELHORIA", subtitle_style))
        
        # Criar lista de recomenda√ß√µes com √≠cones
        for i, rec in enumerate(recommendations, 1):
            # Usar par√°grafos para melhor formata√ß√£o
            rec_text = Paragraph(
                f"<strong>{i}.</strong> {rec}",
                ParagraphStyle(
                    'RecStyle',
                    parent=styles['Normal'],
                    fontSize=10,
                    textColor=colors.darkgreen,
                    leftIndent=15,
                    spaceBefore=6,
                    spaceAfter=6
                )
            )
            elements.append(rec_text)
    
    # Adicionar observa√ß√µes finais
    elements.append(Spacer(1, 0.5*inch))
    elements.append(Paragraph(
        "OBSERVA√á√ïES FINAIS",
        subtitle_style
    ))
    
    if report_type == "vulnerability":
        obs_text = """Este relat√≥rio apresenta uma avalia√ß√£o do n√≠vel de seguran√ßa de dados da sua empresa com base nas respostas fornecidas. 
        As recomenda√ß√µes devem ser implementadas de acordo com a prioridade das vulnerabilidades identificadas. 
        Recomenda-se realizar uma nova avalia√ß√£o ap√≥s a implementa√ß√£o das melhorias."""
    elif report_type == "roi":
        obs_text = """Este relat√≥rio apresenta uma an√°lise do retorno sobre investimento em seguran√ßa da informa√ß√£o. 
        Os valores s√£o baseados nos dados fornecidos e representam proje√ß√µes que podem variar de acordo com o cen√°rio real.
        Recomenda-se revisar periodicamente os investimentos em seguran√ßa para maximizar o ROI."""
    elif report_type == "benchmark":
        obs_text = """Este relat√≥rio apresenta uma compara√ß√£o do n√≠vel de seguran√ßa da sua empresa com a m√©dia do setor.
        Os benchmarks utilizados s√£o baseados em dados coletados de empresas do mesmo segmento.
        Recomenda-se utilizar esta an√°lise como refer√™ncia para definir metas de melhoria."""
    else:
        obs_text = """Este relat√≥rio apresenta uma an√°lise baseada nos dados fornecidos.
        Recomenda-se utilizar estas informa√ß√µes como base para tomada de decis√µes relacionadas √† seguran√ßa da informa√ß√£o."""
    
    elements.append(Paragraph(
        obs_text,
        ParagraphStyle(
            'ObsStyle',
            parent=styles['Normal'],
            fontSize=9,
            leading=12,
            spaceBefore=6,
            spaceAfter=6
        )
    ))
    
    # Adicionar rodap√©
    elements.append(Spacer(1, 0.5*inch))
    elements.append(Paragraph(
        f"¬© {datetime.now().year} Beirama - Seguran√ßa da Informa√ß√£o. Todos os direitos reservados.",
        ParagraphStyle(
            'FooterStyle',
            parent=styles['Normal'],
            fontSize=8,
            textColor=colors.grey,
            alignment=1
        )
    ))
    
    # Finalizar o PDF
    doc.build(elements)
    pdf_data = buffer.getvalue()
    buffer.close()
    
    return pdf_data

# Fun√ß√£o para gerar um link de download para o PDF
def get_pdf_download_link(pdf_data, filename, text):
    b64 = base64.b64encode(pdf_data).decode()
    href = f'<a href="data:application/pdf;base64,{b64}" download="{filename}">{text}</a>'
    return href

# Fun√ß√£o para criar o gr√°fico de veloc√≠metro com Plotly
def create_gauge_chart_plotly(score):
    if score <= 40:
        color = "red"
        risk_level = "üö® CR√çTICO"
    elif score <= 70:
        color = "orange"
        risk_level = "‚ö†Ô∏è MODERADO"
    else:
        color = "green"
        risk_level = "‚úÖ BOM"
    
    fig = go.Figure(go.Indicator(
        mode = "gauge+number+delta",
        value = score,
        domain = {'x': [0, 1], 'y': [0, 1]},
        title = {'text': f"N√≠vel de Seguran√ßa<br><span style='font-size:0.8em;color:{color}'>{risk_level}</span>", 'font': {'size': 24}},
        gauge = {
            'axis': {'range': [None, 100], 'tickwidth': 1, 'tickcolor': "darkblue"},
            'bar': {'color': color},
            'bgcolor': "white",
            'borderwidth': 2,
            'bordercolor': "gray",
            'steps': [
                {'range': [0, 40], 'color': 'rgba(255, 0, 0, 0.3)'},
                {'range': [40, 70], 'color': 'rgba(255, 165, 0, 0.3)'},
                {'range': [70, 100], 'color': 'rgba(0, 128, 0, 0.3)'}],
            'threshold': {
                'line': {'color': "black", 'width': 4},
                'thickness': 0.75,
                'value': score}}))
    
    fig.update_layout(
        height=300,
        margin=dict(l=20, r=20, t=50, b=20),
        paper_bgcolor="white",
        font={'color': "darkblue", 'family': "Arial"}
    )
    
    return fig

# Fun√ß√£o para criar gr√°fico de barras para categorias com Plotly
def create_category_chart_plotly(scores, benchmark_data=None, industry=None):
    categories = list(scores.keys())
    values = list(scores.values())
    
    # Criar DataFrame para Plotly
    df = pd.DataFrame({
        'Categoria': categories,
        'Pontua√ß√£o': values
    })
    
    # Adicionar dados de benchmark se dispon√≠veis
    if benchmark_data and industry:
        benchmark_values = []
        for cat in categories:
            if cat in benchmark_data[industry]:
                benchmark_values.append(benchmark_data[industry][cat])
            else:
                benchmark_values.append(0)
        
        df['Benchmark'] = benchmark_values
        
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=df['Categoria'],
            y=df['Pontua√ß√£o'],
            name='Sua Empresa',
            marker_color='blue'
        ))
        fig.add_trace(go.Bar(
            x=df['Categoria'],
            y=df['Benchmark'],
            name=f'M√©dia do Setor: {industry}',
            marker_color='green'
        ))
    else:
        # Definir as cores com base nos valores
        colors = []
        for value in values:
            if value <= 40:
                colors.append('red')
            elif value <= 70:
                colors.append('orange')
            else:
                colors.append('green')
                
        fig = go.Figure()
        fig.add_trace(go.Bar(
            x=df['Categoria'],
            y=df['Pontua√ß√£o'],
            marker_color=colors
        ))
    
    fig.update_layout(
        title='Pontua√ß√£o por Categoria',
        xaxis_title='Categoria',
        yaxis_title='Pontua√ß√£o (%)',
        yaxis=dict(range=[0, 100]),
        bargap=0.2,
        bargroupgap=0.1,
        height=400,
        margin=dict(l=50, r=50, t=80, b=50)
    )
    
    # Adicionar anota√ß√µes com valores
    for i, value in enumerate(values):
        fig.add_annotation(
            x=categories[i],
            y=value,
            text=f"{value:.1f}%",
            showarrow=False,
            yshift=10,
            font=dict(size=14)
        )
        
    return fig

# Fun√ß√£o para criar gr√°fico de radar para compara√ß√£o de benchmarking
def create_radar_chart(scores, benchmark_data, industry):
    # Preparar os dados
    categories = list(scores.keys())
    company_values = list(scores.values())
    
    benchmark_values = []
    for cat in categories:
        if cat in benchmark_data[industry]:
            benchmark_values.append(benchmark_data[industry][cat])
        else:
            benchmark_values.append(0)
    
    # Criar o gr√°fico de radar
    fig = go.Figure()
    
    # Adicionar dados da empresa
    fig.add_trace(go.Scatterpolar(
        r=company_values,
        theta=categories,
        fill='toself',
        name='Sua Empresa',
        line_color='blue'
    ))
    
    # Adicionar dados do benchmark
    fig.add_trace(go.Scatterpolar(
        r=benchmark_values,
        theta=categories,
        fill='toself',
        name=f'M√©dia do Setor: {industry}',
        line_color='green'
    ))
    
    # Atualizar layout
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100]
            )
        ),
        showlegend=True,
        title=f"Compara√ß√£o com o Setor: {industry}",
        height=500
    )
    
    return fig

# Fun√ß√£o para criar gr√°fico de ROI com Plotly
def create_roi_chart_plotly(investment, total_before, total_after):
    savings = total_before - total_after
    roi = ((savings - investment) / investment) * 100 if investment > 0 else 0
    
    # Criar DataFrame para Plotly
    df = pd.DataFrame({
        'Categoria': ['Investimento', 'Economia', 'ROI (%)'],
        'Valor': [investment, savings, roi]
    })
    
    # Definir cores
    colors = ['blue', 'green', 'orange']
    
    # Criar dois subplots: um para valores monet√°rios, outro para percentual
    fig = make_subplots(rows=1, cols=2, specs=[[{"type": "bar"}, {"type": "bar"}]])
    
    # Valores monet√°rios
    fig.add_trace(
        go.Bar(
            x=['Investimento', 'Economia'],
            y=[investment, savings],
            marker_color=['blue', 'green'],
            text=[format_currency(investment), format_currency(savings)],
            textposition='auto',
            name='Valores (R$)'
        ),
        row=1, col=1
    )
    
    # ROI percentual
    fig.add_trace(
        go.Bar(
            x=['ROI'],
            y=[roi],
            marker_color='orange',
            text=[f"{roi:.1f}%"],
            textposition='auto',
            name='ROI (%)'
        ),
        row=1, col=2
    )
    
    # Atualizar layout
    fig.update_layout(
        title='An√°lise de ROI em Seguran√ßa da Informa√ß√£o',
        height=400,
        showlegend=False,
        margin=dict(l=50, r=50, t=80, b=50)
    )
    
    fig.update_yaxes(title_text="Valor (R$)", row=1, col=1)
    fig.update_yaxes(title_text="Percentual (%)", row=1, col=2)
    
    return fig

# Fun√ß√£o para criar gr√°fico de tend√™ncias de incidentes
def create_incident_trend_chart(incidents_data):
    fig = px.line(
        incidents_data, 
        x='M√™s', 
        y='N√∫mero de Incidentes',
        markers=True,
        line_shape='linear',
        title='Tend√™ncia de Incidentes de Seguran√ßa'
    )
    
    fig.update_layout(
        xaxis_title='M√™s',
        yaxis_title='N√∫mero de Incidentes',
        height=400,
        margin=dict(l=50, r=50, t=80, b=50)
    )
    
    return fig

# Sidebar para navega√ß√£o
st.sidebar.title("üìä Avalia√ß√£o de Seguran√ßa")
page = st.sidebar.radio("Selecione uma op√ß√£o:", ["Teste de Vulnerabilidade", "Calculadora de ROI", "Benchmarking"])

# P√°gina principal
if page == "Teste de Vulnerabilidade":
    st.title("üîí Teste de Vulnerabilidade")
    st.subheader("Avalie o n√≠vel de seguran√ßa dos dados da sua empresa")
    
    # Informa√ß√µes da empresa
    company_name = st.text_input("Nome da sua empresa:", "Minha Empresa S.A.")
    
    # Criar as se√ß√µes do formul√°rio
    st.header("üîç 1. Infraestrutura e Acesso")
    
    infra_q1 = st.radio("Sua empresa utiliza autentica√ß√£o multifator (MFA) para acessos cr√≠ticos?", ["Sim", "N√£o"])
    infra_q2 = st.radio("Os funcion√°rios possuem diferentes n√≠veis de acesso aos dados, de acordo com suas fun√ß√µes?", ["Sim", "N√£o"])
    infra_q3 = st.radio("Os servidores da sua empresa est√£o protegidos por firewalls e monitoramento cont√≠nuo?", ["Sim", "N√£o"])
    infra_q4 = st.selectbox("A empresa realiza backup frequente dos dados cr√≠ticos?", ["Selecione uma op√ß√£o", "Diariamente", "Semanalmente", "Mensalmente", "Nunca"])
    infra_q5 = st.radio("Os dispositivos utilizados pelos funcion√°rios possuem criptografia de dados ativada?", ["Sim", "N√£o"])
    
    # Converter resposta de backup para pontua√ß√£o
    backup_score = 0
    if infra_q4 == "Diariamente":
        backup_score = 1
    elif infra_q4 == "Semanalmente":
        backup_score = 0.75
    elif infra_q4 == "Mensalmente":
        backup_score = 0.5
    
    # Se√ß√£o de Pol√≠ticas e Procedimentos
    st.header("üîë 2. Pol√≠ticas e Procedimentos")
    
    policy_q1 = st.radio("Sua empresa possui uma pol√≠tica de seguran√ßa da informa√ß√£o formalizada e documentada?", ["Sim", "N√£o"])
    policy_q2 = st.radio("Os funcion√°rios passam por treinamentos regulares de conscientiza√ß√£o sobre seguran√ßa da informa√ß√£o?", ["Sim", "N√£o"])
    policy_q3 = st.radio("H√° um plano de resposta a incidentes para lidar com ataques cibern√©ticos?", ["Sim", "N√£o"])
    policy_q4 = st.radio("Os fornecedores e terceiros que acessam dados da empresa seguem normas de seguran√ßa definidas?", ["Sim", "N√£o"])
    policy_q5 = st.radio("Existe uma pol√≠tica de atualiza√ß√£o frequente para sistemas e softwares cr√≠ticos?", ["Sim", "N√£o"])
    
    # Se√ß√£o de Prote√ß√£o Contra Ataques
    st.header("üõ°Ô∏è 3. Prote√ß√£o Contra Ataques Cibern√©ticos")
    
    protect_q1 = st.radio("A empresa realiza testes de invas√£o (pentests) regularmente para avaliar a seguran√ßa da rede?", ["Sim", "N√£o"])
    protect_q2 = st.radio("Existem sistemas ativos de detec√ß√£o e resposta a amea√ßas (EDR, SIEM)?", ["Sim", "N√£o"])
    protect_q3 = st.radio("As senhas utilizadas pelos funcion√°rios seguem boas pr√°ticas (m√≠nimo de 12 caracteres, complexas, n√£o reutilizadas)?", ["Sim", "N√£o"])
    protect_q4 = st.radio("H√° um controle ativo para detectar vazamentos de dados da empresa na dark web?", ["Sim", "N√£o"])
    protect_q5 = st.radio("Existe uma pol√≠tica formal para gerenciamento de dispositivos m√≥veis e trabalho remoto?", ["Sim", "N√£o"])
    
    # Bot√£o para calcular a pontua√ß√£o
    if st.button("Calcular N√≠vel de Vulnerabilidade"):
        # Coletar respostas da infraestrutura
        infra_score = (infra_q1 == "Sim") + (infra_q2 == "Sim") + (infra_q3 == "Sim") + backup_score + (infra_q5 == "Sim")
        
        # Coletar respostas das pol√≠ticas
        policy_score = (policy_q1 == "Sim") + (policy_q2 == "Sim") + (policy_q3 == "Sim") + (policy_q4 == "Sim") + (policy_q5 == "Sim")
        
        # Coletar respostas de prote√ß√£o
        protect_score = (protect_q1 == "Sim") + (protect_q2 == "Sim") + (protect_q3 == "Sim") + (protect_q4 == "Sim") + (protect_q5 == "Sim")
        
        # Calcular pontua√ß√£o total
        total_points = infra_score + policy_score + protect_score
        total_percent = (total_points / 15) * 100
        
        # Calcular porcentagens por categoria
        infra_percent = (infra_score / 5) * 100
        policy_percent = (policy_score / 5) * 100
        protect_percent = (protect_score / 5) * 100
        
        # Exibir resultados
        st.header("üìä Resultados da Avalia√ß√£o")
        
        # Exibir gr√°fico de veloc√≠metro com Plotly
        st.subheader("Pontua√ß√£o Geral")
        gauge_chart = create_gauge_chart_plotly(total_percent)
        st.plotly_chart(gauge_chart, use_container_width=True)
        
        # Classifica√ß√£o de risco
        if total_percent <= 40:
            st.error("üö® RISCO CR√çTICO: A seguran√ßa da sua empresa est√° extremamente vulner√°vel. Voc√™ corre alto risco de sofrer ataques cibern√©ticos que podem resultar em perda de dados, fraudes e viola√ß√µes de compliance.")
            st.error("A√ß√£o recomendada: Implementar imediatamente um plano de seguran√ßa robusto.")
        elif total_percent <= 70:
            st.warning("‚ö†Ô∏è RISCO MODERADO: Sua empresa possui algumas medidas de seguran√ßa, mas h√° brechas significativas. Um ataque pode comprometer suas opera√ß√µes e informa√ß√µes sens√≠veis.")
            st.warning("A√ß√£o recomendada: Revisar processos, treinar equipe e refor√ßar a prote√ß√£o digital.")
        else:
            st.success("‚úÖ SEGURAN√áA ACEIT√ÅVEL: Sua empresa tem uma boa estrutura de seguran√ßa, mas ainda pode melhorar. O ideal √© refinar processos e testar a resili√™ncia contra amea√ßas cada vez mais sofisticadas.")
        
        # Exibir pontua√ß√£o por categoria usando Plotly
        st.subheader("An√°lise por Categoria")
        category_scores = {
            "Infraestrutura": infra_percent,
            "Pol√≠ticas": policy_percent,
            "Prote√ß√£o": protect_percent
        }
        category_chart = create_category_chart_plotly(category_scores)
        st.plotly_chart(category_chart, use_container_width=True)
        
        # Recomenda√ß√µes espec√≠ficas
        st.subheader("Principais Vulnerabilidades Detectadas")
        
        vulnerabilities = []
        recommendations = []
        
        # Infraestrutura
        if infra_q1 == "N√£o":
            vulnerabilities.append("Falta de autentica√ß√£o multifator (MFA)")
            recommendations.append("Implemente MFA para todos os acessos cr√≠ticos e contas de administrador")
            
        if infra_q2 == "N√£o":
            vulnerabilities.append("Aus√™ncia de controle de acesso baseado em fun√ß√µes")
            recommendations.append("Defina e implemente diferentes n√≠veis de acesso para os funcion√°rios")
            
        if infra_q3 == "N√£o":
            vulnerabilities.append("Servidores sem prote√ß√£o adequada de firewall")
            recommendations.append("Instale e configure firewalls e implemente monitoramento cont√≠nuo")
            
        if infra_q4 == "Nunca" or infra_q4 == "Selecione uma op√ß√£o":
            vulnerabilities.append("Aus√™ncia de backup de dados cr√≠ticos")
            recommendations.append("Implemente uma rotina de backup di√°rio e teste regularmente a restaura√ß√£o")
            
        if infra_q5 == "N√£o":
            vulnerabilities.append("Dispositivos sem criptografia de dados")
            recommendations.append("Ative a criptografia em todos os dispositivos corporativos")
        
        # Pol√≠ticas
        if policy_q1 == "N√£o":
            vulnerabilities.append("Aus√™ncia de pol√≠tica de seguran√ßa formalizada")
            recommendations.append("Desenvolva e documente uma pol√≠tica de seguran√ßa da informa√ß√£o")
            
        if policy_q2 == "N√£o":
            vulnerabilities.append("Falta de treinamento de seguran√ßa para funcion√°rios")
            recommendations.append("Implemente treinamentos regulares de conscientiza√ß√£o sobre seguran√ßa")
            
        if policy_q3 == "N√£o":
            vulnerabilities.append("Sem plano de resposta a incidentes")
            recommendations.append("Desenvolva um plano de resposta a incidentes de seguran√ßa")
            
        if policy_q4 == "N√£o":
            vulnerabilities.append("Terceiros acessam dados sem seguir normas de seguran√ßa")
            recommendations.append("Estabele√ßa requisitos de seguran√ßa para fornecedores e parceiros")
            
        if policy_q5 == "N√£o":
            vulnerabilities.append("Falta de pol√≠tica de atualiza√ß√£o de sistemas")
            recommendations.append("Crie uma pol√≠tica para atualiza√ß√£o regular de sistemas e softwares")
        
        # Prote√ß√£o
        if protect_q1 == "N√£o":
            vulnerabilities.append("Aus√™ncia de testes de invas√£o regulares")
            recommendations.append("Realize pentests semestralmente para identificar vulnerabilidades")
            
        if protect_q2 == "N√£o":
            vulnerabilities.append("Sem sistemas de detec√ß√£o e resposta a amea√ßas")
            recommendations.append("Implemente solu√ß√µes EDR/SIEM para monitoramento em tempo real")
            
        if protect_q3 == "N√£o":
            vulnerabilities.append("Senhas fracas ou reutilizadas")
            recommendations.append("Implemente pol√≠tica de senhas fortes e use gerenciador de senhas")
            
        if protect_q4 == "N√£o":
            vulnerabilities.append("Sem monitoramento de vazamentos na dark web")
            recommendations.append("Contrate servi√ßo de monitoramento de vazamentos de dados")
            
        if protect_q5 == "N√£o":
            vulnerabilities.append("Aus√™ncia de pol√≠tica para dispositivos m√≥veis e trabalho remoto")
            recommendations.append("Desenvolva pol√≠tica espec√≠fica para trabalho remoto e BYOD")
        
        # Exibir vulnerabilidades
        if vulnerabilities:
            for i, vuln in enumerate(vulnerabilities):
                st.error(f"‚Ä¢ {vuln}")
        else:
            st.success("N√£o foram detectadas vulnerabilidades cr√≠ticas.")
        
        # Exibir recomenda√ß√µes
        st.subheader("Recomenda√ß√µes de Melhoria")
        if recommendations:
            for i, rec in enumerate(recommendations):
                st.info(f"‚úì {rec}")
        
        # Preparar dados para os relat√≥rios
        results_data = {
            "Pontua√ß√£o Geral": total_percent,
            "N√≠vel de Risco": "Cr√≠tico" if total_percent <= 40 else "Moderado" if total_percent <= 70 else "Bom",
            "Pontua√ß√£o Infraestrutura": infra_percent,
            "Pontua√ß√£o Pol√≠ticas": policy_percent,
            "Pontua√ß√£o Prote√ß√£o": protect_percent,
            "Total de Vulnerabilidades": len(vulnerabilities)
        }
        
        # Criar PDF para download
        pdf_data = create_pdf_report(results_data, vulnerabilities, recommendations, company_name)
        
        # Bot√£o para download do relat√≥rio PDF
        st.subheader("Relat√≥rio Completo")
        st.markdown(get_pdf_download_link(pdf_data, f"relatorio_seguranca_{company_name.replace(' ', '_')}.pdf", "üì• Baixar Relat√≥rio Completo em PDF"), unsafe_allow_html=True)
        
        # Call to Action
        st.subheader("Pr√≥ximos Passos")
        st.info("Para uma an√°lise detalhada e um plano de a√ß√£o personalizado, consulte um especialista em seguran√ßa da informa√ß√£o.")
        
        # Mostrar an√°lise detalhada com Altair (visualiza√ß√£o interativa)
        st.subheader("An√°lise Detalhada por Subcategoria")
        
        # Converter dados para formato adequado para Altair
        detailed_data = pd.DataFrame({
            'Subcategoria': [
                'Autentica√ß√£o MFA', 'Controle de Acesso', 'Prote√ß√£o de Servidores',
                'Backup de Dados', 'Criptografia de Dispositivos', 'Pol√≠tica Documentada',
                'Treinamento da Equipe', 'Resposta a Incidentes', 'Normas para Fornecedores',
                'Atualiza√ß√£o de Sistemas', 'Testes de Invas√£o', 'Sistemas de Detec√ß√£o',
                'Pol√≠tica de Senhas', 'Monitoramento de Vazamentos', 'Gest√£o de Dispositivos M√≥veis'
            ],
            'Categoria': [
                'Infraestrutura', 'Infraestrutura', 'Infraestrutura', 'Infraestrutura', 'Infraestrutura',
                'Pol√≠ticas', 'Pol√≠ticas', 'Pol√≠ticas', 'Pol√≠ticas', 'Pol√≠ticas',
                'Prote√ß√£o', 'Prote√ß√£o', 'Prote√ß√£o', 'Prote√ß√£o', 'Prote√ß√£o'
            ],
            'Status': [
                infra_q1 == "Sim", infra_q2 == "Sim", infra_q3 == "Sim", 
                infra_q4 != "Nunca" and infra_q4 != "Selecione uma op√ß√£o", infra_q5 == "Sim",
                policy_q1 == "Sim", policy_q2 == "Sim", policy_q3 == "Sim", policy_q4 == "Sim", policy_q5 == "Sim",
                protect_q1 == "Sim", protect_q2 == "Sim", protect_q3 == "Sim", protect_q4 == "Sim", protect_q5 == "Sim"
            ],
            'Valor': [
                100 if infra_q1 == "Sim" else 0,
                100 if infra_q2 == "Sim" else 0,
                100 if infra_q3 == "Sim" else 0,
                backup_score * 100,
                100 if infra_q5 == "Sim" else 0,
                100 if policy_q1 == "Sim" else 0,
                100 if policy_q2 == "Sim" else 0,
                100 if policy_q3 == "Sim" else 0,
                100 if policy_q4 == "Sim" else 0,
                100 if policy_q5 == "Sim" else 0,
                100 if protect_q1 == "Sim" else 0,
                100 if protect_q2 == "Sim" else 0,
                100 if protect_q3 == "Sim" else 0,
                100 if protect_q4 == "Sim" else 0,
                100 if protect_q5 == "Sim" else 0
            ]
        })
        
        # Criar gr√°fico interativo com Altair
        chart = alt.Chart(detailed_data).mark_bar().encode(
            x=alt.X('Subcategoria:N', sort=None, title='Subcategoria'),
            y=alt.Y('Valor:Q', title='Pontua√ß√£o (%)'),
            color=alt.condition(
                alt.datum.Status,
                alt.value('green'),
                alt.value('red')
            ),
            tooltip=['Subcategoria', 'Categoria', 'Valor', 'Status']
        ).properties(
            width=700,
            height=400,
            title='An√°lise Detalhada de Controles de Seguran√ßa'
        ).interactive()
        
        st.altair_chart(chart, use_container_width=True)

elif page == "Calculadora de ROI":
    st.title("üí∞ Calculadora de ROI em Seguran√ßa da Informa√ß√£o")
    st.subheader("Avalie o retorno sobre investimento em seguran√ßa cibern√©tica")
    
    # Informa√ß√µes da empresa
    company_name = st.text_input("Nome da sua empresa:", "Minha Empresa S.A.")
    
    # Custos com Incidentes
    st.header("üí∞ 1. Custos com Incidentes Cibern√©ticos")
    
    num_incidents = st.number_input("Quantos ataques cibern√©ticos sua empresa sofreu nos √∫ltimos 12 meses?", min_value=0, value=0, step=1)
    cost_per_incident = st.number_input("Qual foi o custo m√©dio de cada incidente? (R$)", min_value=0.0, value=0.0, step=1000.0)
    hours_per_incident = st.number_input("Quanto tempo sua equipe gastou para mitigar cada incidente? (horas)", min_value=0.0, value=0.0, step=1.0)
    hourly_cost = st.number_input("Qual o custo m√©dio por hora dos profissionais envolvidos na mitiga√ß√£o? (R$)", min_value=0.0, value=0.0, step=10.0)
    
    # Dados hist√≥ricos de incidentes (opcional)
    st.subheader("Hist√≥rico de Incidentes (Opcional)")
    show_history = st.checkbox("Adicionar dados hist√≥ricos de incidentes")
    
    if show_history:
        col1, col2 = st.columns(2)
        with col1:
            incidents_history = {}
            months = ["Janeiro", "Fevereiro", "Mar√ßo", "Abril", "Maio", "Junho"]
            for month in months:
                incidents_history[month] = st.number_input(f"N√∫mero de incidentes em {month}:", min_value=0, value=0, step=1, key=f"hist_{month}")
        
        # Criar DataFrame com os dados hist√≥ricos
        incidents_data = pd.DataFrame({
            'M√™s': list(incidents_history.keys()),
            'N√∫mero de Incidentes': list(incidents_history.values())
        })
        
        # Mostrar gr√°fico de tend√™ncia
        with col2:
            if sum(incidents_history.values()) > 0:
                trend_chart = create_incident_trend_chart(incidents_data)
                st.plotly_chart(trend_chart, use_container_width=True)
            else:
                st.info("Adicione dados de incidentes para visualizar a tend√™ncia.")
    
    # Investimentos em Seguran√ßa
    st.header("üîê 2. Investimentos em Seguran√ßa")
    
    security_investment = st.number_input("Quanto sua empresa investiu em seguran√ßa da informa√ß√£o nos √∫ltimos 12 meses? (R$)", min_value=0.0, value=0.0, step=1000.0)
    reduced_incidents = st.radio("Esse investimento reduziu a frequ√™ncia ou o impacto dos ataques?", ["Sim", "N√£o"])
    
    if reduced_incidents == "Sim":
        new_num_incidents = st.number_input("N√∫mero reduzido de ataques por ano ap√≥s o investimento:", min_value=0, value=0, step=1)
        new_cost_per_incident = st.number_input("Novo custo m√©dio por incidente ap√≥s o investimento (R$):", min_value=0.0, value=0.0, step=1000.0)
        new_hours_per_incident = st.number_input("Novo tempo de resposta por incidente (horas):", min_value=0.0, value=0.0, step=1.0)
    else:
        new_num_incidents = num_incidents
        new_cost_per_incident = cost_per_incident
        new_hours_per_incident = hours_per_incident
    
    # Impacto nos Neg√≥cios
    st.header("üìà 3. Impacto nos Neg√≥cios")
    
    lost_customers = st.radio("Algum incidente de seguran√ßa resultou na perda de clientes?", ["Sim", "N√£o"])
    
    if lost_customers == "Sim":
        num_lost_customers = st.number_input("Quantos clientes foram perdidos?", min_value=0, value=0, step=1)
        average_ticket = st.number_input("Qual √© o ticket m√©dio anual de um cliente para sua empresa? (R$)", min_value=0.0, value=0.0, step=1000.0)
    else:
        num_lost_customers = 0
        average_ticket = 0.0
    
    # Bot√£o para calcular ROI
    if st.button("Calcular ROI"):
        # Calcular custo total antes
        total_cost_before = (num_incidents * cost_per_incident) + (num_incidents * hours_per_incident * hourly_cost)
        
        # Calcular custo total depois
        total_cost_after = (new_num_incidents * new_cost_per_incident) + (new_num_incidents * new_hours_per_incident * hourly_cost)
        
        # Calcular economia obtida
        savings = total_cost_before - total_cost_after
        
        # Calcular ROI
        if security_investment > 0:
            roi = ((savings - security_investment) / security_investment) * 100
        else:
            roi = 0
        
        # Calcular perda de receita com clientes
        revenue_loss = num_lost_customers * average_ticket
        
        # Exibir resultados
        st.header("üìä Resultados da An√°lise de ROI")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Custos Antes do Investimento")
            st.info(f"N√∫mero de incidentes: {num_incidents}")
            st.info(f"Custo m√©dio por incidente: {format_currency(cost_per_incident)}")
            st.info(f"Tempo m√©dio de resolu√ß√£o: {format_hours(hours_per_incident)}")
            st.info(f"Custo total com incidentes: {format_currency(total_cost_before)}")
        
        with col2:
            st.subheader("Custos Ap√≥s o Investimento")
            st.info(f"Investimento em seguran√ßa: {format_currency(security_investment)}")
            st.info(f"N√∫mero reduzido de incidentes: {new_num_incidents}")
            st.info(f"Novo custo m√©dio por incidente: {format_currency(new_cost_per_incident)}")
            st.info(f"Custo total reduzido: {format_currency(total_cost_after)}")
        
        # Exibir gr√°fico de ROI com Plotly
        st.subheader("An√°lise de ROI")
        roi_chart = create_roi_chart_plotly(security_investment, total_cost_before, total_cost_after)
        st.plotly_chart(roi_chart, use_container_width=True)
        
        # Resumo financeiro
        st.subheader("Resumo Financeiro")
        st.success(f"Economia direta obtida: {format_currency(savings)}")
        
        if roi >= 0:
            st.success(f"ROI do investimento em seguran√ßa: {format_percent(roi)}")
        else:
            st.error(f"ROI do investimento em seguran√ßa: {format_percent(roi)}")
            
        if lost_customers == "Sim" and num_lost_customers > 0:
            st.error(f"Perda de receita devido a clientes perdidos: {format_currency(revenue_loss)}")
            st.info(f"Impacto financeiro total (economia - perda de clientes): {format_currency(savings - revenue_loss)}")
        
        # Adicionar visualiza√ß√£o avan√ßada: divis√£o detalhada dos custos
        st.subheader("An√°lise Detalhada de Custos")
        
        # Preparar dados para gr√°fico de pizza
        cost_breakdown_before = {
            "Custos diretos com incidentes": num_incidents * cost_per_incident,
            "Custos com horas de trabalho": num_incidents * hours_per_incident * hourly_cost
        }
        
        cost_breakdown_after = {
            "Custos diretos com incidentes": new_num_incidents * new_cost_per_incident,
            "Custos com horas de trabalho": new_num_incidents * new_hours_per_incident * hourly_cost
        }
        
        # Criar subplots para os gr√°ficos de pizza
        fig = make_subplots(rows=1, cols=2, specs=[[{"type": "pie"}, {"type": "pie"}]],
                           subplot_titles=("Custos Antes do Investimento", "Custos Ap√≥s o Investimento"))
        
        # Gr√°fico de pizza para antes
        fig.add_trace(
            go.Pie(
                labels=list(cost_breakdown_before.keys()),
                values=list(cost_breakdown_before.values()),
                textinfo='percent+label',
                marker=dict(colors=['#FF6B6B', '#4ECDC4']),
                name="Antes"
            ),
            row=1, col=1
        )
        
        # Gr√°fico de pizza para depois
        fig.add_trace(
            go.Pie(
                labels=list(cost_breakdown_after.keys()),
                values=list(cost_breakdown_after.values()),
                textinfo='percent+label',
                marker=dict(colors=['#FF6B6B', '#4ECDC4']),
                name="Depois"
            ),
            row=1, col=2
        )
        
        # Atualizar layout
        fig.update_layout(
            height=400,
            margin=dict(l=20, r=20, t=60, b=20)
        )
        
        st.plotly_chart(fig, use_container_width=True)
        
        # Conclus√£o
        st.subheader("Conclus√£o")
        
        if roi > 100:
            st.success(f"O investimento de {format_currency(security_investment)} em seguran√ßa gerou um excelente retorno de {format_percent(roi)}, economizando {format_currency(savings)} para a empresa.")
        elif roi > 0:
            st.success(f"O investimento de {format_currency(security_investment)} em seguran√ßa gerou um retorno positivo de {format_percent(roi)}, economizando {format_currency(savings)} para a empresa.")
        else:
            st.warning(f"O investimento de {format_currency(security_investment)} em seguran√ßa ainda n√£o gerou retorno financeiro positivo ({format_percent(roi)}). Considere avaliar a efic√°cia das medidas implementadas.")
        
        # Recomenda√ß√µes
        st.subheader("Recomenda√ß√µes Estrat√©gicas")
        
        if roi < 0:
            st.info("‚Ä¢ Reavalie as medidas de seguran√ßa implementadas para garantir maior efic√°cia.")
            st.info("‚Ä¢ Considere investir em solu√ß√µes com melhor custo-benef√≠cio.")
            st.info("‚Ä¢ Concentre os recursos em proteger os ativos mais cr√≠ticos primeiro.")
        elif roi < 50:
            st.info("‚Ä¢ Continue investindo em seguran√ßa, focando em √°reas de maior risco.")
            st.info("‚Ä¢ Implemente treinamentos de conscientiza√ß√£o para reduzir incidentes causados por erro humano.")
            st.info("‚Ä¢ Considere automatizar processos de seguran√ßa para reduzir custos operacionais.")
        else:
            st.info("‚Ä¢ Mantenha o investimento em seguran√ßa e considere expandi-lo para outras √°reas.")
            st.info("‚Ä¢ Compartilhe m√©tricas de sucesso com a lideran√ßa para garantir continuidade do or√ßamento.")
            st.info("‚Ä¢ Implemente um programa de melhoria cont√≠nua para manter os resultados positivos.")
        
        # Criar PDF para download
        roi_results = {
            "Investimento": security_investment,
            "Economia": savings,
            "ROI": roi,
            "Perda de Clientes": revenue_loss,
            "Impacto Total": savings - revenue_loss
        }
        
        # Criar PDF para download
        pdf_data = create_pdf_report(roi_results, [], [], company_name)
        
        # Bot√£o para download do relat√≥rio PDF
        st.subheader("Relat√≥rio Completo")
        st.markdown(get_pdf_download_link(pdf_data, f"relatorio_roi_seguranca_{company_name.replace(' ', '_')}.pdf", "üì• Baixar Relat√≥rio Completo em PDF"), unsafe_allow_html=True)
        
        # Call to Action
        st.subheader("Pr√≥ximos Passos")
        st.info("Para uma an√°lise detalhada e estrat√©gia de investimento em seguran√ßa personalizada, consulte um especialista em seguran√ßa da informa√ß√£o.")

elif page == "Benchmarking":
    st.title("üåê Benchmarking de Seguran√ßa")
    st.subheader("Compare o n√≠vel de seguran√ßa da sua empresa com a m√©dia do seu setor")
    
    # Informa√ß√µes da empresa
    company_name = st.text_input("Nome da sua empresa:", "Minha Empresa S.A.")
    industry = st.selectbox("Setor de atua√ß√£o:", ["Tecnologia", "Finan√ßas", "Sa√∫de", "Varejo", "Educa√ß√£o", "Manufatura", "Servi√ßos"])
    
    # Resultados da avalia√ß√£o de seguran√ßa
    st.header("üìä Resultados da sua Avalia√ß√£o de Seguran√ßa")
    st.info("Insira abaixo os resultados obtidos na aba 'Teste de Vulnerabilidade'")
    
    infra_score = st.slider("Pontua√ß√£o em Infraestrutura (%):", 0, 100, 50)
    policy_score = st.slider("Pontua√ß√£o em Pol√≠ticas (%):", 0, 100, 50)
    protect_score = st.slider("Pontua√ß√£o em Prote√ß√£o (%):", 0, 100, 50)
    
    # Calcular pontua√ß√£o total
    total_score = (infra_score + policy_score + protect_score) / 3
    
    # Obter dados de benchmark
    benchmark_data = get_benchmark_data()
    
    # Bot√£o para comparar
    if st.button("Comparar com o Setor"):
        st.header("üìà An√°lise Comparativa")
        
        # Criar dados para compara√ß√£o
        company_scores = {
            "Infraestrutura": infra_score,
            "Pol√≠ticas": policy_score,
            "Prote√ß√£o": protect_score,
            "Total": total_score
        }
        
        # Visualiza√ß√£o da pontua√ß√£o geral
        st.subheader("Pontua√ß√£o Geral vs. M√©dia do Setor")
        
        # Criar DataFrame para compara√ß√£o
        comparison_df = pd.DataFrame({
            'Entidade': ['Sua Empresa', f'M√©dia do Setor: {industry}'],
            'Pontua√ß√£o': [total_score, benchmark_data[industry]['Total']]
        })
        
        # Criar gr√°fico de barras para compara√ß√£o geral
        fig_general = px.bar(
            comparison_df, 
            x='Entidade', 
            y='Pontua√ß√£o',
            color='Entidade',
            text_auto='.1f',
            title=f"Compara√ß√£o da Pontua√ß√£o Geral - {company_name} vs. M√©dia do Setor: {industry}",
            color_discrete_map={'Sua Empresa': 'blue', f'M√©dia do Setor: {industry}': 'green'}
        )
        
        fig_general.update_layout(
            yaxis_title="Pontua√ß√£o (%)",
            yaxis=dict(range=[0, 100]),
            height=400
        )
        
        st.plotly_chart(fig_general, use_container_width=True)
        
        # An√°lise por categoria com gr√°fico de radar
        st.subheader("An√°lise Detalhada por Categoria")
        radar_chart = create_radar_chart(company_scores, benchmark_data, industry)
        st.plotly_chart(radar_chart, use_container_width=True)
        
        # Diferen√ßas por categoria
        st.subheader("Diferen√ßas por Categoria")
        
        # Criar DataFrame para diferen√ßas
        diff_data = []
        for category in ['Infraestrutura', 'Pol√≠ticas', 'Prote√ß√£o', 'Total']:
            company_value = company_scores[category]
            benchmark_value = benchmark_data[industry][category]
            diff = company_value - benchmark_value
            
            diff_data.append({
                'Categoria': category,
                'Sua Empresa': company_value,
                f'M√©dia do Setor: {industry}': benchmark_value,
                'Diferen√ßa': diff,
                'Status': 'Acima da M√©dia' if diff >= 0 else 'Abaixo da M√©dia'
            })
        
        diff_df = pd.DataFrame(diff_data)
        
        # Criar gr√°fico para diferen√ßas
        fig_diff = go.Figure()
        
        # Adicionar barras para empresa
        fig_diff.add_trace(go.Bar(
            x=diff_df['Categoria'],
            y=diff_df['Sua Empresa'],
            name='Sua Empresa',
            marker_color='blue'
        ))
        
        # Adicionar barras para benchmark
        fig_diff.add_trace(go.Bar(
            x=diff_df['Categoria'],
            y=diff_df[f'M√©dia do Setor: {industry}'],
            name=f'M√©dia do Setor: {industry}',
            marker_color='green'
        ))
        
        # Atualizar layout
        fig_diff.update_layout(
            title='Comparativo Detalhado por Categoria',
            yaxis_title='Pontua√ß√£o (%)',
            yaxis=dict(range=[0, 100]),
            barmode='group',
            height=400
        )
        
        st.plotly_chart(fig_diff, use_container_width=True)
        
        # Tabela de compara√ß√£o
        st.subheader("Tabela Comparativa")
        
        # Formatar a tabela para exibi√ß√£o
        display_diff = diff_df.copy()
        display_diff['Sua Empresa'] = display_diff['Sua Empresa'].apply(lambda x: f"{x:.1f}%")
        display_diff[f'M√©dia do Setor: {industry}'] = display_diff[f'M√©dia do Setor: {industry}'].apply(lambda x: f"{x:.1f}%")
        display_diff['Diferen√ßa'] = display_diff['Diferen√ßa'].apply(lambda x: f"{x:+.1f}%")
        
        # Exibir tabela estilizada
        st.dataframe(
            display_diff[['Categoria', 'Sua Empresa', f'M√©dia do Setor: {industry}', 'Diferen√ßa', 'Status']],
            use_container_width=True
        )
        
        # Gr√°fico de todos os setores para compara√ß√£o
        st.subheader("Compara√ß√£o com Todos os Setores")
        
        # Preparar dados para o gr√°fico
        all_industries_data = []
        for ind in benchmark_data.keys():
            all_industries_data.append({
                'Setor': ind,
                'Pontua√ß√£o': benchmark_data[ind]['Total']
            })
        
        # Adicionar a empresa
        all_industries_data.append({
            'Setor': 'Sua Empresa',
            'Pontua√ß√£o': total_score
        })
        
        all_industries_df = pd.DataFrame(all_industries_data)
        
        # Ordenar por pontua√ß√£o
        all_industries_df = all_industries_df.sort_values('Pontua√ß√£o', ascending=False)
        
        # Criar gr√°fico de barras para todos os setores
        fig_all = px.bar(
            all_industries_df,
            x='Setor',
            y='Pontua√ß√£o',
            text_auto='.1f',
            title='Compara√ß√£o com Todos os Setores',
            color='Setor',
            color_discrete_map={
                'Sua Empresa': 'blue',
                **{ind: 'lightgreen' if ind == industry else 'lightgray' for ind in benchmark_data.keys()}
            }
        )
        
        fig_all.update_layout(
            yaxis_title='Pontua√ß√£o (%)',
            yaxis=dict(range=[0, 100]),
            xaxis_title='',
            height=500
        )
        
        st.plotly_chart(fig_all, use_container_width=True)
        
        # Recomenda√ß√µes baseadas nas diferen√ßas
        st.subheader("An√°lise e Recomenda√ß√µes")
        
        overall_status = "acima" if total_score >= benchmark_data[industry]["Total"] else "abaixo"
        st.write(f"Sua empresa est√° **{overall_status}** da m√©dia do setor **{industry}**, com uma pontua√ß√£o geral de **{total_score:.1f}%** comparada √† m√©dia de **{benchmark_data[industry]['Total']}%**.")
        
        # Identificar pontos fortes e fracos
        strengths = []
        weaknesses = []
        
        for category in ['Infraestrutura', 'Pol√≠ticas', 'Prote√ß√£o']:
            diff = company_scores[category] - benchmark_data[industry][category]
            if diff >= 5:
                strengths.append(category)
            elif diff <= -5:
                weaknesses.append(category)
        
        # Exibir pontos fortes
        if strengths:
            st.success("#### üí™ Pontos Fortes")
            for strength in strengths:
                st.success(f"‚Ä¢ {strength}: Sua empresa est√° **{company_scores[strength] - benchmark_data[industry][strength]:+.1f}%** acima da m√©dia do setor.")
        
        # Exibir pontos fracos
        if weaknesses:
            st.error("#### ‚ö†Ô∏è √Åreas para Melhoria")
            for weakness in weaknesses:
                st.error(f"‚Ä¢ {weakness}: Sua empresa est√° **{company_scores[weakness] - benchmark_data[industry][weakness]:+.1f}%** abaixo da m√©dia do setor.")
                
                # Recomenda√ß√µes espec√≠ficas
                if weakness == "Infraestrutura":
                    st.info("**Recomenda√ß√µes**: Implemente autentica√ß√£o multifator, reforce a prote√ß√£o de servidores e estabele√ßa pol√≠tica de backup regular.")
                elif weakness == "Pol√≠ticas":
                    st.info("**Recomenda√ß√µes**: Desenvolva pol√≠tica formal de seguran√ßa, realize treinamentos regulares e crie planos de resposta a incidentes.")
                elif weakness == "Prote√ß√£o":
                    st.info("**Recomenda√ß√µes**: Implemente sistemas de detec√ß√£o e resposta a amea√ßas, realize testes de invas√£o regularmente e reforce pol√≠ticas de senhas.")
        
        # Se n√£o houver pontos fracos significativos
        if not weaknesses:
            st.success("Parab√©ns! Sua empresa est√° em boa posi√ß√£o em rela√ß√£o √† m√©dia do setor. Continue mantendo altos padr√µes de seguran√ßa e busque melhorias cont√≠nuas.")
        
        # Criar PDF para download
        benchmark_results = {
            "Pontua√ß√£o Geral": total_score,
            "M√©dia do Setor": benchmark_data[industry]["Total"],
            "Diferen√ßa": total_score - benchmark_data[industry]["Total"],
            "Pontua√ß√£o Infraestrutura": infra_score,
            "Pontua√ß√£o Pol√≠ticas": policy_score,
            "Pontua√ß√£o Prote√ß√£o": protect_score,
            "N√≠vel de Risco": "Acima da M√©dia" if total_score >= benchmark_data[industry]["Total"] else "Abaixo da M√©dia"
        }
        
        # Criar recomenda√ß√µes para o PDF
        benchmark_recommendations = []
        if weaknesses:
            for weakness in weaknesses:
                if weakness == "Infraestrutura":
                    benchmark_recommendations.append("Implemente autentica√ß√£o multifator, reforce a prote√ß√£o de servidores e estabele√ßa pol√≠tica de backup regular.")
                elif weakness == "Pol√≠ticas":
                    benchmark_recommendations.append("Desenvolva pol√≠tica formal de seguran√ßa, realize treinamentos regulares e crie planos de resposta a incidentes.")
                elif weakness == "Prote√ß√£o":
                    benchmark_recommendations.append("Implemente sistemas de detec√ß√£o e resposta a amea√ßas, realize testes de invas√£o regularmente e reforce pol√≠ticas de senhas.")
        else:
            benchmark_recommendations.append("Continue mantendo altos padr√µes de seguran√ßa e busque melhorias cont√≠nuas.")
        
        # Criar PDF para download
        pdf_data = create_pdf_report(benchmark_results, [], benchmark_recommendations, company_name)
        
        # Bot√£o para download do relat√≥rio PDF
        st.subheader("Relat√≥rio de Benchmarking")
        st.markdown(get_pdf_download_link(pdf_data, f"relatorio_benchmarking_{company_name.replace(' ', '_')}.pdf", "üì• Baixar Relat√≥rio de Benchmarking em PDF"), unsafe_allow_html=True)

# Rodap√©
st.markdown("---")
st.markdown("Desenvolvido por Beirama para avalia√ß√£o de seguran√ßa da informa√ß√£o | ¬© 2025")